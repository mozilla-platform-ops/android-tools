#!/usr/bin/env python3

import argparse
import sys

import tomlkit
import yaml

# meant to be run in the `ronin_puppet/inventory.d` directory

# intended to be used with safe/unsafe_runner
#   - see https://github.com/mozilla-platform-ops/android-tools/tree/master/worker_health#safe_runner


def parse_yaml(file_paths, long_format, ignore_array=[]):
    targets = []
    for file_path in file_paths:
        with open(file_path, "r") as file:
            try:
                data = yaml.safe_load(file)
            except yaml.parser.ParserError:
                print(f"Error parsing file '{file_path}'. It doesn't seem to be a valid YAML file.")
                sys.exit(1)

        # import pprint
        # pprint.pprint(data)
        # sys.exit(1)

        for group in data["groups"]:
            move_to_next_group = False
            group_name = group["name"]
            # pprint.pprint(group)
            # print(f"Checking group: {group_name}")
            for ignore_substring in ignore_array:
                # print(f"Checking if {ignore_substring} is in {group_name}")
                if ignore_substring in group_name:
                    # print(f"** Ignoring group: {group_name}")
                    # set flag to break out of outer loop
                    move_to_next_group = True
                    continue
            if move_to_next_group:
                continue
            for target in group["targets"]:
                if long_format:
                    targets.append(target)
                else:
                    hostname = target.split(".")[0]
                    targets.append(hostname)

    return targets


def main():
    parser = argparse.ArgumentParser(
        description=(
            "Process ronin-puppet YAML inventory files and set safe/unsafe-runner state files `remaining_hosts` value."
        ),
    )
    parser.add_argument("-l", "--long", action="store_true", help="Include full hostname in output")
    parser.add_argument(
        "-i",
        "--ignore",
        type=str,
        action="append",
        default=[],
        help="Ignore groups containing the specified substring (can be specified multiple times)",
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-t",
        "--runner-text-mode",
        action="store_true",
        help="Output in runner mode (long format, with header)",
    )
    group.add_argument(
        "-r",
        "--runner-resume-dir",
        metavar="RUN_DIR",
        help="path to a runner resume directory, will output hosts to dir's TOML state file",
    )
    parser.add_argument("files", type=str, nargs="+", help="Path(s) to the YAML file(s)")

    args = parser.parse_args()
    # print(args)

    if args.runner_text_mode:
        args.long = True
        targets = parse_yaml(args.files, args.long, args.ignore)
        print("# generated by extract_targets.py")
        print(f"#   {len(targets)} targets found")
        # display the full command line invocation
        print(f"#   `{' '.join(sys.argv)}`")
        print("#")
        print(f"remaining_hosts = {targets}")
    elif args.runner_resume_dir:
        args.long = True
        targets = parse_yaml(args.files, args.long, args.ignore)
        # print(targets)

        # using tomlkit, load the file runner_state.toml in the resume directory
        # if it exists, and update the `remaining_hosts` key with the new targets
        # if it doesn't exist, raise an error
        try:
            with open(args.runner_resume_dir + "/runner_state.toml", "r") as file:
                state = tomlkit.loads(file.read())
        except FileNotFoundError:
            print(f"Error: runner_state.toml not found in {args.runner_resume_dir}")
            sys.exit(1)

        # update the `remaining_hosts` key in the 'state' section with the new targets
        state["state"]["remaining_hosts"] = targets

        # write the updated state back to the file
        with open(args.runner_resume_dir + "/runner_state.toml", "w") as file:
            file.write(tomlkit.dumps(state))
    else:
        targets = parse_yaml(args.files, args.long, args.ignore)
        print(targets)


if __name__ == "__main__":
    main()
