#!/usr/bin/env python3

import argparse
import sys

# Check if PyYAML is installed, and if not, print an error message
try:
    import yaml
except ImportError:
    print("Error: PyYAML is not installed. You can install it using 'pip install pyyaml' or 'brew install pyyaml'.")
    sys.exit(1)


# meant to be run in the `ronin_puppet/inventory.d` directory

# intended to be used with safe/unsafe_runner
#   - see https://github.com/mozilla-platform-ops/android-tools/tree/master/worker_health#safe_runner


def parse_yaml(file_paths, long_format, ignore_array=[]):
    targets = []
    for file_path in file_paths:
        with open(file_path, "r") as file:
            data = yaml.safe_load(file)

        # import pprint
        # pprint.pprint(data)
        # sys.exit(1)

        for group in data["groups"]:
            move_to_next_group = False
            group_name = group["name"]
            # pprint.pprint(group)
            # print(f"Checking group: {group_name}")
            for ignore_substring in ignore_array:
                # print(f"Checking if {ignore_substring} is in {group_name}")
                if ignore_substring in group_name:
                    # print(f"** Ignoring group: {group_name}")
                    # set flag to break out of outer loop
                    move_to_next_group = True
                    continue
            if move_to_next_group:
                continue
            for target in group["targets"]:
                if long_format:
                    targets.append(target)
                else:
                    hostname = target.split(".")[0]
                    targets.append(hostname)

    return targets


def main():
    parser = argparse.ArgumentParser(description="Process YAML inventory files to extract targets.")
    parser.add_argument("-l", "--long", action="store_true", help="Include full hostname in output")
    parser.add_argument(
        "-i",
        "--ignore",
        type=str,
        action="append",
        default=[],
        help="Ignore groups containing the specified substring (can be specified multiple times)",
    )
    parser.add_argument(
        "-r",
        "--runner-mode",
        action="store_true",
        help="Output in runner mode (long format, with header)",
    )
    parser.add_argument("files", type=str, nargs="+", help="Path(s) to the YAML file(s)")

    args = parser.parse_args()
    # print(args)

    if args.runner_mode:
        args.long = True
        targets = parse_yaml(args.files, args.long, args.ignore)
        print("# generated by extract_targets.py")
        print(f"#   {len(targets)} targets found")
        # display the full command line invocation
        print(f"#   `{' '.join(sys.argv)}`")
        print("#")
        print(f"remaining_hosts = {targets}")
    else:
        targets = parse_yaml(args.files, args.long, args.ignore)
        print(targets)


if __name__ == "__main__":
    main()
