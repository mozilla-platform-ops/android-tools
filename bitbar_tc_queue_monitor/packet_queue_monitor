#!/usr/bin/env python3

import json
import os
import sys

import taskcluster

try:
    from pyfiglet import Figlet
except Exception:
    print("Please run `pip3 install pyfiglet` and rerun.")
    sys.exit(1)


#
# docs: https://pypi.org/project/taskcluster/
#

# don't need to create separate credentials
# per tomprince:
#   You can use taskcluster signin to get creds (and can use -s <scope>, possibly multiple times, to restrict scopes).

# print("requires manual configuration currently. edit source and rerun.")
# sys.exit()

# removes a single line of whitespace
def remove_single_whitespace_line(the_string):
    exit_function = False
    while the_string[0] == "\n" or the_string[0] == " ":
        if the_string[0] == "\n":
            exit_function = True
        the_string = the_string[1:]
        if exit_function:
            break
    return the_string


def pad_entire_string(a_string, pad_distance=2, pad_character=" "):
    return_string = ""
    for line in a_string.split("\n"):
        line_len = len(line)
        padded_line = line.rjust(line_len + pad_distance, pad_character)
        return_string = return_string + padded_line + "\n"
    return return_string.rstrip()


with open(os.path.expanduser("~/.tc_quarantine_token")) as json_file:
    data = json.load(json_file)
creds = {"clientId": data["clientId"], "accessToken": data["accessToken"]}

queue_obj = taskcluster.Queue(
    {"rootUrl": "https://firefox-ci-tc.services.mozilla.com", "credentials": creds}
)

queues_to_check = [
    "terraform-packet/gecko-t-linux",
    # "proj-autophone/gecko-t-bitbar-gw-batt-p2",
    #  "proj-autophone/gecko-t-bitbar-gw-perf-p2",
    #  "proj-autophone/gecko-t-bitbar-gw-unit-p2",
    # "proj-autophone/gecko-t-bitbar-gw-batt-g5",
    #  "proj-autophone/gecko-t-bitbar-gw-perf-g5",
    # "proj-autophone/gecko-t-bitbar-gw-unit-g5",
    # "proj-autophone/gecko-t-bitbar-gw-test-g5",
]


def pretty_print(data):
    # print(data)
    # # col_width = max(len(word) for row in data for word in row) + 2  # padding
    # col_width = 20
    # for row in data:
    #   print("".join(word.ljust(col_width) for word in row))
    for k, v in data.items():  # iterating freqa dictionary
        print(k + "\t", v)


for queue in queues_to_check:
    provisioner = queue.split("/")[0]
    workertype = queue.split("/")[1]
    result = queue_obj.pendingTasks(provisioner, workertype)

    # print(queue_obj.pendingTasks(provisioner, workertype))
    # pretty_print(result)
    print(
        "%s%s"
        % ((provisioner + "/" + workertype).ljust(50, " "), result["pendingTasks"])
    )

    # command = "figlet -d /usr/local/Cellar/figlet/2.2.5/share/figlet/fonts -f doh 168"
    # result = subprocess.run(command.split(' '), stdout=subprocess.PIPE)
    # print(result.stdout)

    # TODO: merge this into main, just call it 'big' mode or something
    # print("%s/%s" % (provisioner, workertype))
    f = Figlet(font="doh")
    string_to_render = str(result["pendingTasks"])
    rendered_string = f.renderText(string_to_render)

    # string_to_display = remove_single_whitespace_line(rendered_string.rstrip())
    string_to_display = pad_entire_string(
        remove_single_whitespace_line(rendered_string.rstrip())
    )
    print(string_to_display)
    print()

# import ipdb; ipdb.set_trace()
